<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Longg`s Site</title>
    <link>/</link>
    <description>Recent content on Longg`s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Jan 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugoflow</title>
      <link>/post/flow/</link>
      <pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/flow/</guid>
      <description>1.使用Hugo 新建mockdown
hugo new flow.md 2.预览
hugo server 3.编译
hugo -D 4.上传
cd .public git add . git commit git push </description>
    </item>
    
    <item>
      <title>Fastapi jwt验正</title>
      <link>/post/fastapi-jwt%E9%AA%8C%E6%AD%A3/</link>
      <pubDate>Thu, 04 Mar 2021 22:49:49 +0800</pubDate>
      
      <guid>/post/fastapi-jwt%E9%AA%8C%E6%AD%A3/</guid>
      <description>Fastapi Oauth2 + jwt验正 验正流程:
1.小明(客户端)发送请求给 longg(第三方应用) :
​	-客户端访问第三方端口,无权限就重定向到服务方
​	&amp;mdash;-访问接口
​	&amp;mdash;-无权限
​	&amp;mdash;密码使用JWT验正
 longg说需要登入:
-成功登入之后返回token,并保存在本地
  小明成功访问
  import jwt from fastapi import FastAPI, Depends, HTTPException, status from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm from passlib.hash import bcrypt from tortoise import fields from tortoise.contrib.fastapi import register_tortoise from tortoise.contrib.pydantic import pydantic_model_creator from tortoise.models import Model app = FastAPI() JWT_SECRET = &amp;#39;myjwtsecret&amp;#39; class User(Model): id = fields.IntField(pk=True) username = fields.</description>
    </item>
    
    <item>
      <title>Fastapi min代码示例</title>
      <link>/post/fastapi-min%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Thu, 04 Mar 2021 22:49:49 +0800</pubDate>
      
      <guid>/post/fastapi-min%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/</guid>
      <description>Fastapi jwt验正 import jwt from fastapi import FastAPI, Depends, HTTPException, status from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm from passlib.hash import bcrypt from tortoise import fields from tortoise.contrib.fastapi import register_tortoise from tortoise.contrib.pydantic import pydantic_model_creator from tortoise.models import Model app = FastAPI() JWT_SECRET = &amp;#39;myjwtsecret&amp;#39; class User(Model): id = fields.IntField(pk=True) username = fields.CharField(50, unique=True) password_hash = fields.CharField(128) def verify_password(self, password): return bcrypt.verify(password, self.password_hash) User_Pydantic = pydantic_model_creator(User, name=&amp;#39;User&amp;#39;) UserIn_Pydantic = pydantic_model_creator(User, name=&amp;#39;UserIn&amp;#39;, exclude_readonly=True) oauth2_scheme = OAuth2PasswordBearer(tokenUrl=&amp;#39;token&amp;#39;) async def authenticate_user(username: str, password: str): user = await User.</description>
    </item>
    
    <item>
      <title>Git使用学习笔记</title>
      <link>/post/git/</link>
      <pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/git/</guid>
      <description>一、Git知识点   将发生变化的文件全部保存。为了减少磁盘使用，只保存发生变化的文件。使用sha1算法的20字节（40位）值作为对象的唯一标识。   三个域： repository &amp;ndash; 仓库 working directory &amp;ndash; 工作区 staging area/index &amp;ndash; 过渡区   三个对象： tree ：记录文件名，及指向blob的指针 blob ：记录文件内容 commit ：和tree是一一对应的 find .git/objects/ -type f |wc -l git cat-file -t sha1码 git show -s &amp;ndash;pretty=raw xxx
  三个引用： HEAD branch remote branch
  其他： 对象是静止的，引用是动态的。
  二、操作使用 git配置 1.文件位置
用户目录下的全局配置文件： C:\Users\Administrator.gitconfig 各仓库自己的配置文件： D:\gitdemo.git\config
2.用户配置：
# 全局， git config --global user.name &amp;#39;pyli.xm&amp;#39; git config --global user.</description>
    </item>
    
  </channel>
</rss>