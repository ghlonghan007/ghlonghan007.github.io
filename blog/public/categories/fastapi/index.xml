<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fastapi on Longg`s Site</title>
    <link>https://ghlonghan007.github.io/categories/fastapi/</link>
    <description>Recent content in Fastapi on Longg`s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Mar 2021 22:49:49 +0800</lastBuildDate>
    
	<atom:link href="https://ghlonghan007.github.io/categories/fastapi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fastapi jwt验正</title>
      <link>https://ghlonghan007.github.io/post/fastapi-jwt%E9%AA%8C%E6%AD%A3/</link>
      <pubDate>Thu, 04 Mar 2021 22:49:49 +0800</pubDate>
      
      <guid>https://ghlonghan007.github.io/post/fastapi-jwt%E9%AA%8C%E6%AD%A3/</guid>
      <description>Fastapi Oauth2 + jwt验正 验正流程:
1.小明(客户端)发送请求给 longg(第三方应用) :
​	-客户端访问第三方端口,无权限就重定向到服务方
​	&amp;mdash;-访问接口
​	&amp;mdash;-无权限
​	&amp;mdash;密码使用JWT验正
 longg说需要登入:
-成功登入之后返回token,并保存在本地
  小明成功访问
  import jwt from fastapi import FastAPI, Depends, HTTPException, status from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm from passlib.hash import bcrypt from tortoise import fields from tortoise.contrib.fastapi import register_tortoise from tortoise.contrib.pydantic import pydantic_model_creator from tortoise.models import Model app = FastAPI() JWT_SECRET = &amp;#39;myjwtsecret&amp;#39; class User(Model): id = fields.IntField(pk=True) username = fields.</description>
    </item>
    
    <item>
      <title>Fastapi min代码示例</title>
      <link>https://ghlonghan007.github.io/post/fastapi-min%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Thu, 04 Mar 2021 22:49:49 +0800</pubDate>
      
      <guid>https://ghlonghan007.github.io/post/fastapi-min%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/</guid>
      <description>Fastapi jwt验正 import jwt from fastapi import FastAPI, Depends, HTTPException, status from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm from passlib.hash import bcrypt from tortoise import fields from tortoise.contrib.fastapi import register_tortoise from tortoise.contrib.pydantic import pydantic_model_creator from tortoise.models import Model app = FastAPI() JWT_SECRET = &amp;#39;myjwtsecret&amp;#39; class User(Model): id = fields.IntField(pk=True) username = fields.CharField(50, unique=True) password_hash = fields.CharField(128) def verify_password(self, password): return bcrypt.verify(password, self.password_hash) User_Pydantic = pydantic_model_creator(User, name=&amp;#39;User&amp;#39;) UserIn_Pydantic = pydantic_model_creator(User, name=&amp;#39;UserIn&amp;#39;, exclude_readonly=True) oauth2_scheme = OAuth2PasswordBearer(tokenUrl=&amp;#39;token&amp;#39;) async def authenticate_user(username: str, password: str): user = await User.</description>
    </item>
    
  </channel>
</rss>