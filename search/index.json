[{"content":"","date":"2022-06-08T13:32:01+08:00","image":"https://example.com/p/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/5e996d4855dad999_hu8cc3d46cae446b5f5c3efe17a8070a41_71705_120x120_fill_q75_box_smart1.jpeg","permalink":"https://example.com/p/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/","title":"Go并发编程"},{"content":"Mutex ——互斥锁 解决并发问题：资源竞争，往同一个 buffer 中写入数据\n  基础用法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func main() { var count = 0 var wg sync.WaitGroup wg.Add(10) for i := 0; i \u0026lt; 10; i++ { go func() { defer wg.Done() for j := 0; j \u0026lt; 1000; j++ { count++ } }() } wg.Wait() fmt.Println(count) } // 9288   检查并发问题： go run -race counter.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func main() { var wg sync.WaitGroup var counter Counter wg.Add(10) for i := 0; i \u0026lt; 10; i++ { go func() { defer wg.Done() for j := 0; j \u0026lt; 100000; j++ { counter.Incr() } }() } wg.Wait() fmt.Println(counter.Count()) } type Counter struct { mux sync.Mutex count uint64 } func (c *Counter) Incr() { c.mux.Lock() c.count++ c.mux.Unlock() } func (c *Counter) Count() uint64{ c.mux.Lock() defer c.mux.Unlock() return c.count }     实现原理\nCSA:CAS 指令将给定的值和一个内存地址中的值进行比较，如果它们是同一个值，就使用新值替换内存地址中的值，这个操作是原子性的。\n  V1 \u0026ndash; flag +当前持有和等待获取锁的 goroutine 的数量 缺点：任意的 goroutine 都可以释放\n要求编码人员，编码的时候注意成对使用unlock()，一定要遵循“谁申请，谁释放”的原则。\n  V2 \u0026ndash; 优先交给正在占用 CPU 时间片的 goroutine\nmutex lock源码：\n 1-4 行 如果正好有锁 new 代表现在等待者数量 14-17 如果被信号量唤醒了，清除唤醒标志 19-20 设置状态，如果能成功地通过 CAS 把这个新值赋予state就代表抢夺锁的操作成功了。 23 等待信号量  mutex unlock源码：\n  V3 \u0026ndash; 新来的 goroutine 或者是被唤醒的 goroutine 首次获取不到锁，它们就会通过自旋\n  v4 \u0026ndash; 解决饥饿\n有的goroutine 一直等待，等不到锁，不公平。饥饿模式的最大等待时间阈值设置成了 1 毫秒，超过这个等待时间，优先获取锁\n    易错场景\n  Lock/Unlock不是成对出现\n  Copy已使用的Mutex\n12 行传入了foo()复制了一个锁\n使用 go vet main.go\n  重入 拥有锁的线程再次请求这个锁（递归锁）\n  死锁\n    知名项目中的 Bug\n docker issue36114 重入死锁 docker issue 34881 if之后直接返回 没有unlock Kubernetes issue 72361 data race 资源竞争 Kubernetes issue 45192 没有unlock etcd issue 10419 锁重入    拓展功能\n  TryLock\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;sync/atomic\u0026#34; \u0026#34;time\u0026#34; \u0026#34;unsafe\u0026#34; ) const ( mutexLocked = 1 \u0026lt;\u0026lt; iota // 加锁标示位置 \tmutexWoken // 唤醒标示位置 \tmutexStarving // 锁饥饿标示 \tmutexWaiterShift = iota // 标示Waiter的起始bit位置 ) type Mutex struct { sync.Mutex } // 尝试获取锁 func (m *Mutex) TryLock() bool { // fast path 如果一开始就没有其他g争夺，那么直接获取锁 \tif atomic.CompareAndSwapInt32((*int32)(unsafe.Pointer(\u0026amp;m.Mutex)), 0, mutexLocked) { return true } // 如果处于唤醒，加锁或者饥饿状态，这次请求就不参与了竞争了，直接返回false \told := atomic.LoadInt32((*int32)(unsafe.Pointer(\u0026amp;m.Mutex))) if old\u0026amp;(mutexLocked|mutexWoken|mutexStarving) != 0 { return false } // 尝试在竞争的状态下请求锁 \tn := old | mutexLocked return atomic.CompareAndSwapInt32((*int32)(unsafe.Pointer(\u0026amp;m.Mutex)), old, n) } func main() { var mu Mutex go func() { // 启动一个g持有一段时间的锁  mu.Lock() time.Sleep(time.Duration(rand.Intn(2)) * time.Second) mu.Unlock() }() time.Sleep(time.Second) ok := mu.TryLock() // 尝试获取锁 \tif ok { // 获取锁成功  fmt.Println(\u0026#34;got the lock\u0026#34;) // 开始你的业务  mu.Unlock() return } // 没有获取到 \tfmt.Println(\u0026#34;can\u0026#39;t get the lock\u0026#34;) }     获取等待的goroutine的信息\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;sync/atomic\u0026#34; \u0026#34;time\u0026#34; \u0026#34;unsafe\u0026#34; ) const ( mutexLocked = 1 \u0026lt;\u0026lt; iota // 加锁标示位置 \tmutexWoken // 唤醒标示位置 \tmutexStarving // 锁饥饿标示 \tmutexWaiterShift = iota // 标示Waiter的起始bit位置 ) type Mutex struct { sync.Mutex } func main() { var mu Mutex for i := 0; i \u0026lt; 1000; i++ { go func() { mu.Lock() time.Sleep(time.Second) mu.Unlock() }() } time.Sleep(time.Second) fmt.Printf(\u0026#34;waitings:%d,isLocked:%t,woken:%t,starving:%t\\n\u0026#34;, mu.Count(), mu.IsLocked(), mu.IsWoken(), mu.IsStarving()) } func (m *Mutex) Count() int { // 获取state字段的值 \tv := atomic.LoadInt32((*int32)(unsafe.Pointer(\u0026amp;m.Mutex))) v = v \u0026gt;\u0026gt; mutexWaiterShift // 得到等待者的数 \tv = v + (v \u0026amp; mutexLocked) // 再加上锁持有者的数量 0或者1 \treturn int(v) } // 锁是否被持有 func (m *Mutex) IsLocked() bool { state := atomic.LoadInt32((*int32)(unsafe.Pointer(\u0026amp;m.Mutex))) return state\u0026amp;mutexLocked == mutexLocked } // 是否有等待者被唤醒 func (m *Mutex) IsWoken() bool { state := atomic.LoadInt32((*int32)(unsafe.Pointer(\u0026amp;m.Mutex))) return state\u0026amp;mutexWoken == mutexWoken } // 锁是否处于饥饿状态 func (m *Mutex) IsStarving() bool { state := atomic.LoadInt32((*int32)(unsafe.Pointer(\u0026amp;m.Mutex))) return state\u0026amp;mutexStarving == mutexStarving }     线程安全的queue(Enqueue/Dequeue使用mutex)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; ) type SliceQueue struct { data []interface{} mu sync.Mutex } func NewQueue(n int) *SliceQueue { return \u0026amp;SliceQueue{ data: make([]interface{}, 0, n), } } // 入队 把值放在队尾 func (q *SliceQueue) Enqueue(v interface{}) { q.mu.Lock() q.data = append(q.data, v) q.mu.Unlock() } // 出队，移除队头并返回 func (q *SliceQueue) Dequeue() interface{} { q.mu.Lock() // 如果队列为空，直接返回nil \tif len(q.data) == 0 { q.mu.Unlock() return \u0026#34;队列没有数据了\u0026#34; } v := q.data[0] // 移除队头 \tq.data = q.data[1:] q.mu.Unlock() return v } func main() { var wg sync.WaitGroup queue := NewQueue(100) wg.Add(2) go func() { wg.Done() for i := 0; i \u0026lt; 100; i++ { queue.Enqueue(i) } }() go func() { for { v := queue.Dequeue() fmt.Println(\u0026#34;出队的值是：\u0026#34;, v) time.Sleep(50 * time.Millisecond) } }() wg.Wait() }     ","date":"2022-06-08T13:32:01+08:00","image":"https://example.com/p/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-mutex/5e996d4855dad999_hu8cc3d46cae446b5f5c3efe17a8070a41_71705_120x120_fill_q75_box_smart1.jpeg","permalink":"https://example.com/p/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-mutex/","title":"Go并发编程--Mutex"},{"content":"stack 主题 https://docs.stack.jimmycai.com/zh/getting-started hugo new /post/hugo文章创建.md\n","date":"2022-06-08T12:07:17+08:00","image":"https://example.com/p/hugo%E6%96%87%E7%AB%A0%E5%88%9B%E5%BB%BA/luca-bravo-alS7ewQ41M8-unsplash_hu0a3f1163de68d0b9471979ebf0ecf11e_32400_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/hugo%E6%96%87%E7%AB%A0%E5%88%9B%E5%BB%BA/","title":"Hugo文章创建"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用  思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n 图片 1 2 3  ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg)   相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://example.com/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code       A B C D E F     Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien    Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Diff code block 1 2 3 4 5  [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;]   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image \n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://example.com/p/markdown%E8%AF%AD%E6%B3%95%E6%8C%87%E5%AF%BC/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/markdown%E8%AF%AD%E6%B3%95%E6%8C%87%E5%AF%BC/","title":"Markdown语法指导"}]